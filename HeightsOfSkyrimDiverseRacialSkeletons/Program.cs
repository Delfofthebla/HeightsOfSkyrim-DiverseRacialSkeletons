using System.Diagnostics;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;

namespace HeightsOfSkyrimDiverseRacialSkeletons;

public static class Program
{
    private static Lazy<Settings> _settings = new();
    private static Settings Settings => _settings.Value;
        
    public static async Task<int> Main(string[] args)
    {
        return await SynthesisPipeline.Instance
            .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
            .SetAutogeneratedSettings("Settings", "settings.json", out _settings)
            .SetTypicalOpen(GameRelease.SkyrimSE, "HeightOfSkyrimPatch.esp")
            .AddRunnabilityCheck(state
                => Debug.Assert(
                    state.LoadOrder.ContainsKey(ModKey.FromNameAndExtension("Heights_of_Skyrim.esp")),
                    "\n\nYour Heights_of_Skyrim.esp is not in load order or above Synthesis.esp in LO\n\n")
                )
            .Run(args);
    }

    private static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
    {
        ModKey heightsKey = ModKey.FromNameAndExtension("Heights_of_Skyrim.esp");
        state.LoadOrder.TryGetIfEnabledAndExists(heightsKey, out var heightsMod);
        if (heightsMod is null)
            throw new Exception("Your Heights_of_Skyrim.esp is not activated, present, or located above Synthesis.esp in LO");
        
        ModKey diverseKey = ModKey.FromNameAndExtension("FK's Diverse Racial Skeletons.esp");
        state.LoadOrder.TryGetIfEnabledAndExists(diverseKey, out var diverseMod);
        if (diverseMod is null)
            throw new Exception("Your FK's Diverse Racial Skeletons.esp is not activated, present, or located above Synthesis.esp in LO");

        var modifiedRaceHeights = new Dictionary<(FormKey, bool), float>();
        foreach (IRaceGetter racialSkeletonRace in diverseMod.Races)
        {
            IRaceGetter winningOverride = racialSkeletonRace.ToLink().Resolve(state.LinkCache);
            var maleHeightIsUnchanged = Math.Abs(winningOverride.Height.Male - racialSkeletonRace.Height.Male) < 0.00001;
            var femaleHeightIsUnchanged = Math.Abs(winningOverride.Height.Female - racialSkeletonRace.Height.Female) < 0.00001;
            if (maleHeightIsUnchanged && femaleHeightIsUnchanged)
                continue;

            Race raceToPatch = state.PatchMod.Races.GetOrAddAsOverride(winningOverride);
            raceToPatch.Height.Male = racialSkeletonRace.Height.Male;
            raceToPatch.Height.Female = racialSkeletonRace.Height.Female;
            
            // I may need to change this to actually read from Skyrim.esm instead of just the latest override,
            // since it's possible for the user to not have a mod that touches races.
            if (!maleHeightIsUnchanged)
                modifiedRaceHeights[(raceToPatch.FormKey, false)] = racialSkeletonRace.Height.Male;
            if (!femaleHeightIsUnchanged)
                modifiedRaceHeights[(raceToPatch.FormKey, true)] = racialSkeletonRace.Height.Female;
        }
            
        foreach (INpcGetter heightsOfSkyrimNpc in heightsMod.Npcs)
        {
            INpcGetter winningOverride = heightsOfSkyrimNpc.ToLink().Resolve(state.LinkCache);
            if (Math.Abs(winningOverride.Height - heightsOfSkyrimNpc.Height) < 0.00001)
                continue;

            INpc npcToPatch = state.PatchMod.Npcs.GetOrAddAsOverride(winningOverride);
            var raceKey = (npcToPatch.Race.FormKey, (npcToPatch.Configuration.Flags & NpcConfiguration.Flag.Female) != 0);
            var raceWasModified = modifiedRaceHeights.ContainsKey(raceKey);

            if (!raceWasModified)
                npcToPatch.Height = heightsOfSkyrimNpc.Height;
            else
            {
                var heightDiff = npcToPatch.Height - heightsOfSkyrimNpc.Height;
                var multipliedHeight = npcToPatch.Height - (float)(heightDiff * Settings.HeightChangeMultiplier);
                npcToPatch.Height = multipliedHeight;
            }
        }
    }
}
